Users
========

All the user related actions require a valid firebase token.
To do this you need to first log in to firebase on the app, and then request a session token.
This changes once an hour, and should be automatically regenerated by firebase for you.
The server maintains no session state, meaning you must include your session token with every request.
It is used to identify you.

The token is expected in the ``Authorization`` header.

.. code ::

    Authorization: Bearer $FIREBASE_TOKEN

Creating a User
---------------

Anyone who has already authenticated with firebase can then create a user in the system.
This must be done before you use the rest of the system, but only has to be done once.

1. Collect the user's data, matching :class:`~server.serializer.models.UserSchema` excluding ``id`` and ``firebase_id``.
2. Make a POST request to ``/api/v1/users`` with your data and auth token.
3. Receive the new :class:`~server.serializer.models.UserSchema` for the user.

You may now make authenticated requests to the routes that require it.

Updating a User
---------------

If you have already created a user you can entirely replace your user details,
with PUT requests.

1. Collect the user's data, matching :class:`~server.serializer.models.UserSchema` excluding ``id`` and ``firebase_id``.
2. Make a PUT request to ``/api/v1/users/me`` with your data and auth token.
3. Receive the updated :class:`~server.serializer.models.UserSchema` for the user.

Getting a User's Details
------------------------

The user that matches the supplied authorization header can always be found at the "me" endpoint.
All you need to do is send a request to ``/api/v1/users/me`` with your authorization header.

You can also access other data associated with the user in the same way:

- ``/api/v1/users/me`` - the current user
- ``/api/v1/users/me/rentals`` - the current user's rentals
- ``/api/v1/users/me/rentals/current`` - the current user's current rental
- ``/api/v1/users/me/reservations`` - the current user's reservations
- ``/api/v1/users/me/issues`` - the current user's issues
